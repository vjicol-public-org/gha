name: Label Deploy Requests

on:
  issues:
    types: [opened, edited]
    
permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write
  


jobs:
  check-issue-label:
    runs-on: ubuntu-latest
    if: github.event.issue.labels.*.name != 'deploy-request'
    steps:
      - name: Check issue label
        id: label-check
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const labels = context.payload.issue.labels.map(label => label.name);
            const hasLabel = labels.includes('deploy-request');

            if (!hasLabel) {
              const message = `‚ùå This issue must be labeled with \`deploy-request\` to trigger deployment validation.`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                body: message,
              });
              core.setFailed(message);
            }
            else {
              console.log(`‚úÖ Issue #${issue_number} is labeled with 'deploy-request'.`);
            }
  validate-user-permissions:
    needs: [check-issue-label]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Check user team and post error if unauthorized
        uses: actions/github-script@v7
        with:
          script: |
            const username = 'dummy-user';
            const teamSlug = 'prod';
            console.log(`‚úÖ @${username} is a member of "${teamSlug}".`);

  terraform-plan:
    needs: [validate-user-permissions]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::295616346134:role/github-terraform-deployer
          aws-region: us-east-1
          role-session-name: github-actions

      - name: Terraform Init & Plan
        id: init
        run: |
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan -no-color > plan.txt
          echo "TERRAFORM_PLAN_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          cat plan.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload Terraform Plan File
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan
      
      - name: Comment Plan on Issue
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## üì¶ Terraform Plan for `${{ github.event.repository.name }}`
            <details>
            <summary>Click to expand plan output</summary>
      
            ```
            ${{ steps.plan.outputs.TERRAFORM_PLAN_OUTPUT }}
            ```
      
            </details>

  # Job that requests approval
  request-approval:
    needs: terraform-plan
    runs-on: ubuntu-latest
    environment:
      name: prod-deploy-approval
    outputs:
      env-name: ${{ steps.setenv.outputs.env }}
    continue-on-error: true  # Prevent hard failure so all steps can run
    steps:
      - name: Set environment name for output
        id: setenv
        run: echo "env=prod-deploy-approval" >> $GITHUB_OUTPUT

      - name: Handle approval or rejection
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Check job status (if approval was granted, this step will run normally)
            const jobStatus = process.env.GITHUB_JOB_STATUS || 'unknown';

            if (jobStatus === 'failure' || jobStatus === 'cancelled') {
              await github.rest.issues.createComment({
                issue_number,
                owner,
                repo,
                body: `‚ùå Deployment was **rejected or cancelled** during environment approval for **prod**.`
              });

              await github.rest.issues.addLabels({
                issue_number,
                owner,
                repo,
                labels: ['rejected', 'prod-deploy-rejected']
              });
            } else {
              await github.rest.issues.createComment({
                issue_number,
                owner,
                repo,
                body: `‚úÖ Deployment to **prod** was approved.`
              });

              await github.rest.issues.addLabels({
                issue_number,
                owner,
                repo,
                labels: ['approved', 'prod-deploy-approved']
              });
            }

  terraform-deploy:
    needs: [request-approval]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::295616346134:role/github-terraform-deployer
          aws-region: us-east-1
          role-session-name: github-actions

      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .

      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Apply
        id: apply
        continue-on-error: true  # allow failure so we can handle it manually
        run: | 
          terraform apply -auto-approve tfplan > apply.txt
          echo "exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Prepare apply output for comment
        id: prepare-apply-output
        run: |
          echo "TERRAFORM_APPLY_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          cat apply.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      
      - name: Comment Apply Output on GitHub Issue
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## üöÄ Terraform Apply Output for `${{ github.event.repository.name }}`
            <details>
            <summary>Click to expand output</summary>
      
            ```
            ${{ steps.prepare-apply-output.outputs.TERRAFORM_APPLY_OUTPUT }}
            ```
      
            </details>
      
      - name: Comment success on GitHub issue
        if: ${{ steps.apply.outputs.exit_code == '0' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ Terraform deployment to **prod** completed successfully.`
            });
          
      - name: Comment failure on GitHub issue
        if: ${{ steps.apply.outputs.exit_code != '0' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå Terraform deployment to **prod** failed. See logs in the previous comment.`
            });
      
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['prod-deploy-failed']
            });
      