name: Label Deploy Requests

on:
  issues:
    types: [opened, edited]
    
permissions:
  issues: write
  


jobs:
  label:
    runs-on: ubuntu-latest
    if: github.event.issue.labels.*.name != 'deploy-request'
    steps:
      - name: Check issue label
        id: label-check
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const labels = context.payload.issue.labels.map(label => label.name);
            const hasLabel = labels.includes('deploy-request');

            if (!hasLabel) {
              const message = `❌ This issue must be labeled with \`deploy-request\` to trigger deployment validation.`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                body: message,
              });
              core.setFailed(message);
            }
            else {
              console.log(`✅ Issue #${issue_number} is labeled with 'deploy-request'.`);
            }
  validate-user:
    needs: label
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Check user team and post error if unauthorized
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body;
            const username = context.payload.issue.user.login;
            const issue_number = context.issue.number;
            const org = context.repo.owner;

            const envMatch = body.match(/### Environment\s+([^\n]+)/);
            const teamMatch = body.match(/### Requesting Team\s+([^\n]+)/);
            const environment = envMatch ? envMatch[1].trim().toLowerCase() : null;
            const teamSlug = teamMatch ? teamMatch[1].trim().toLowerCase() : null;

            if (!environment || !teamSlug) {
              const msg = `❌ Missing **Environment** or **Requesting Team** in issue body.`;
              await github.rest.issues.createComment({
                owner: org,
                repo: context.repo.repo,
                issue_number,
                body: msg,
              });
              core.setFailed(msg);
              return;
            }

            try {
              await github.rest.teams.getMembershipForUserInOrg({
                org,
                team_slug: teamSlug,
                username,
              });
              console.log(`✅ @${username} is a member of ${teamSlug}.`);
            } catch (error) {
              const message = `❌ @${username} is **not** a member of the **${teamSlug}** team. Cannot proceed with **${environment}** deployment.`;
              await github.rest.issues.createComment({
                owner: org,
                repo: context.repo.repo,
                issue_number,
                body: message,
              });
              core.setFailed(message);
            }
