name: Label Deploy Requests

on:
  issues:
    types: [opened, edited]
    
permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write
  


jobs:
  label:
    runs-on: ubuntu-latest
    if: github.event.issue.labels.*.name != 'deploy-request'
    steps:
      - name: Check issue label
        id: label-check
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const labels = context.payload.issue.labels.map(label => label.name);
            const hasLabel = labels.includes('deploy-request');

            if (!hasLabel) {
              const message = `❌ This issue must be labeled with \`deploy-request\` to trigger deployment validation.`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                body: message,
              });
              core.setFailed(message);
            }
            else {
              console.log(`✅ Issue #${issue_number} is labeled with 'deploy-request'.`);
            }
  validate-user:
    needs: label
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Check user team and post error if unauthorized
        uses: actions/github-script@v7
        with:
          script: |
            console.log(`✅ @${username} is a member of ${teamSlug}.`);
            # const body = context.payload.issue.body;
            # const username = context.payload.issue.user.login;
            # const issue_number = context.issue.number;
            # const org = context.repo.owner;

            # const envMatch = body.match(/### Environment\s+([^\n]+)/);
            # const teamMatch = body.match(/### Team Responsible for Deployment\s+([^\n]+)/);
            # const environment = envMatch ? envMatch[1].trim().toLowerCase() : null;
            # const teamSlug = teamMatch ? teamMatch[1].trim().toLowerCase() : null;

            # if (!environment || !teamSlug) {
            #   const msg = `❌ Missing **Environment** or **Team Responsible for Deployment** in issue body.`;
            #   await github.rest.issues.createComment({
            #     owner: org,
            #     repo: context.repo.repo,
            #     issue_number,
            #     body: msg,
            #   });
            #   core.setFailed(msg);
            #   return;
            # }

            # try {
            #   await github.rest.teams.getMembershipForUserInOrg({
            #     org,
            #     team_slug: teamSlug,
            #     username,
            #   });
            #   console.log(`✅ @${username} is a member of ${teamSlug}.`);
            # } catch (error) {
            #   const message = `❌ @${username} is **not** a member of the **${teamSlug}** team. Cannot proceed with **${environment}** deployment.`;
            #   await github.rest.issues.createComment({
            #     owner: org,
            #     repo: context.repo.repo,
            #     issue_number,
            #     body: message,
            #   });
            #   core.setFailed(message);
            # }

  terraform-plan:
    needs: validate-user
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::295616346134:role/github-terraform-deployer
          aws-region: us-west-2
          role-session-name: github-actions

      - name: Terraform Init & Plan
        id: plan
        run: |
          terraform init
          terraform plan -out=tfplan > plan.txt
          echo "PLAN_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          cat plan.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment Plan on Issue
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ### 📦 Terraform Plan Output
            ```
            ${{ steps.plan.outputs.PLAN_OUTPUT }}
            ```
